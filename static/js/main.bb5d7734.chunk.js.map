{"version":3,"sources":["components/Upload.jsx","components/App.jsx","lib/getTxt.js","lib/download.js","lib/encode.js","reportWebVitals.js","index.js","components/App.module.css"],"names":["UploadFile","handleRead","useState","file","setFile","props","onRemove","beforeUpload","type","message","error","fileList","icon","UploadOutlined","App","data","setData","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","txt","map","item","push","toString","padStart","getTxt","downloadClick","xlsxURL","window","URL","createObjectURL","Blob","join","tempLink","document","createElement","href","setAttribute","string","encodeChar","c","h","test","indexOf","charCodeAt","res","i","length","charAt","encodeCP1251","click","download","className","style","main","buttons","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bb5d7734.chunk.js","sourcesContent":["import { useState } from \"react\";\n\n//componetns\nimport { Button, Upload, message } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nexport const UploadFile = ({ handleRead }) => {\n  const [file, setFile] = useState([]);\n\n  const props = {\n    onRemove: () => {\n      setFile([]);\n    },\n\n    beforeUpload: (file) => {\n      const isCsvOrXlsx =\n        file.type === \"text/csv\" ||\n        file.type ===\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\n      if (!isCsvOrXlsx) {\n        message.error(\"Не правильный формат файла\");\n      }\n\n      setFile([file]);\n      handleRead(file);\n    },\n  };\n\n  return (\n    <Upload {...props} fileList={file}>\n      <Button icon={<UploadOutlined />}>Upload</Button>\n    </Upload>\n  );\n};\n","import { useState } from \"react\";\nimport XLSX from \"xlsx\";\n\n//components\nimport { Alert, Button } from \"antd\";\nimport { UploadFile } from \"./Upload\";\n\n//utils\nimport { download } from \"../lib/download\";\nimport { getTxt } from \"../lib/getTxt\";\n\n//style\nimport style from \"./App.module.css\";\nimport \"antd/dist/antd.css\";\n\nexport const App = () => {\n  const [data, setData] = useState([]);\n\n  const reader = new FileReader();\n\n  const rABS = !!reader.readAsBinaryString;\n\n  reader.onload = (e) => {\n    const bstr = e.target.result;\n    const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n    const wsname = wb.SheetNames[0];\n    const ws = wb.Sheets[wsname];\n    const data = XLSX.utils.sheet_to_json(ws, {\n      header: 1,\n    });\n    setData(getTxt(data));\n  };\n\n  const handleRead = (file) => {\n    reader.readAsBinaryString(file);\n  };\n\n  const downloadClick = (data) => {\n    download(data);\n  };\n\n  return (\n    <div className={style.main}>\n      <Alert\n        message={\n          <span>\n            Скачайте &nbsp;\n            <a href=\"/templates/шаблон.xlsx\" download>\n              шаблон\n            </a>\n            &nbsp; и заполните его.\n          </span>\n        }\n        type=\"info\"\n      />\n\n      <div className={style.buttons}>\n        <UploadFile handleRead={handleRead} />\n\n        <Button\n          type=\"primary\"\n          onClick={() => downloadClick(data)}\n          disabled={data.length === 0}\n        >\n          Скачать\n        </Button>\n      </div>\n    </div>\n  );\n};\n","export const getTxt = (data) => {\n  let txt = [];\n\n  if (!data) {\n    return null;\n  }\n\n  data.map((item) => {\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0001=\"${item[1]}\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0002=\"${item[2]}\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0003=\"1\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0004=\"0\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0005=\"0,000\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0006=\"0,000\"`);\n\n    return null;\n  });\n\n  return [\"[1]\", ...txt];\n};\n","import { encodeCP1251 } from \"./encode\";\n\nexport const download = (txt) => {\n  let xlsxURL = window.URL.createObjectURL(\n    new Blob([[txt.join(\"\\r\\n\")]], {\n      type: \"text/plain\",\n    })\n  );\n  let tempLink = document.createElement(\"a\");\n  tempLink.href = xlsxURL;\n  tempLink.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=cp1251,\" + encodeCP1251(txt.join(\"\\n\"))\n  );\n  tempLink.setAttribute(\"download\", \"elves.txt\");\n  tempLink.click();\n};\n","export const encodeCP1251 = (string) => {\n  function encodeChar(c) {\n    let isKyr = function (str) {\n      return /[а-я]/i.test(str);\n    };\n\n    let cp1251 =\n      \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬*®Ї°±Ііґµ¶·\\\nё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\";\n\n    let p = isKyr(c) ? cp1251.indexOf(c) + 128 : c.charCodeAt(0);\n\n    let h = p.toString(16);\n\n    if (h === \"a\") {\n      h = \"0A\";\n    }\n\n    return \"%\" + h;\n  }\n\n  let res = \"\";\n\n  for (let i = 0; i < string.length; i++) {\n    res += encodeChar(string.charAt(i)); //ну или string[i]\n  }\n\n  return res;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__jNC5T\",\"buttons\":\"App_buttons__3GWl1\"};"],"sourceRoot":""}