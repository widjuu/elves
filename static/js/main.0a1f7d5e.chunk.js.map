{"version":3,"sources":["components/Upload.jsx","components/App.jsx","lib/getTxt.js","lib/download.js","lib/encode.js","reportWebVitals.js","index.js","components/App.module.css"],"names":["UploadFile","file","setFile","props","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","isCsvOrXlsx","type","message","error","fileList","icon","UploadOutlined","App","useState","data","setData","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","className","style","main","href","download","buttons","onClick","txt","map","item","push","toString","padStart","getTxt","xlsxURL","window","URL","createObjectURL","Blob","join","tempLink","document","createElement","setAttribute","string","encodeChar","c","h","test","charCodeAt","res","i","length","charAt","encodeCP1251","click","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0a1f7d5e.chunk.js","sourcesContent":["//componetns\nimport { Button, Upload, message } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nexport const UploadFile = ({ file, setFile }) => {\n  const props = {\n    onRemove: (file) => {\n      const index = file.indexOf(file);\n      const newFileList = file.slice();\n      newFileList.splice(index, 1);\n      setFile([newFileList]);\n    },\n\n    beforeUpload: (file) => {\n      const isCsvOrXlsx =\n        file.type === \"text/csv\" ||\n        file.type ===\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\n\n      if (!isCsvOrXlsx) {\n        message.error(\"Не правильный формат файла\");\n      }\n\n      if (isCsvOrXlsx) {\n        setFile([file]);\n      }\n    },\n  };\n\n  return (\n    <Upload {...props} fileList={file}>\n      <Button icon={<UploadOutlined />}>Upload</Button>\n    </Upload>\n  );\n};\n","import { useState } from \"react\";\nimport XLSX from \"xlsx\";\n\n//components\nimport { Alert, Button } from \"antd\";\nimport { UploadFile } from \"./Upload\";\n\n//utils\nimport { download } from \"../lib/download\";\nimport { getTxt } from \"../lib/getTxt\";\n\n//style\nimport style from \"./App.module.css\";\nimport \"antd/dist/antd.css\";\n\nexport const App = () => {\n  const [file, setFile] = useState([]);\n  const [data, setData] = useState([]);\n\n  const reader = new FileReader();\n\n  const rABS = !!reader.readAsBinaryString;\n\n  reader.onload = (e) => {\n    const bstr = e.target.result;\n    const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n    const wsname = wb.SheetNames[0];\n    const ws = wb.Sheets[wsname];\n    const data = XLSX.utils.sheet_to_json(ws, {\n      header: 1,\n    });\n    setData(data);\n  };\n\n  const downloadClick = () => {\n    reader.readAsBinaryString(file[0]);\n\n    const txt = getTxt(data);\n\n    if (txt) {\n      download(txt);\n    }\n  };\n\n  return (\n    <div className={style.main}>\n      <Alert\n        message={\n          <span>\n            Скачайте &nbsp;\n            <a href=\"/templates/шаблон.xlsx\" download>\n              шаблон\n            </a>\n            &nbsp; и заполните его.\n          </span>\n        }\n        type=\"info\"\n      />\n\n      <div className={style.buttons}>\n        <UploadFile file={file} setFile={setFile} />\n\n        <Button\n          type=\"primary\"\n          onClick={downloadClick}\n          disabled={file.length === 0}\n        >\n          Скачать\n        </Button>\n      </div>\n    </div>\n  );\n};\n","export const getTxt = (data) => {\n  let txt = [\"[1]\"];\n\n  if (!data) {\n    return null;\n  }\n\n  data.map((item) => {\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0001=\"${item[1]}\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0002=\"${item[2]}\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0003=\"1\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0004=\"0\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0005=\"0,000\"`);\n    txt.push(`${item[0].toString().padStart(4, \"0\")}.0006=\"0,000\"`);\n\n    return null;\n  });\n\n  return txt;\n};\n","import { encodeCP1251 } from \"./encode\";\n\nexport const download = (txt) => {\n  let xlsxURL = window.URL.createObjectURL(\n    new Blob([[txt.join(\"\\r\\n\")]], {\n      type: \"text/plain\",\n    })\n  );\n  let tempLink = document.createElement(\"a\");\n  tempLink.href = xlsxURL;\n  tempLink.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=cp1251,\" + encodeCP1251(txt.join(\"\\n\"))\n  );\n  tempLink.setAttribute(\"download\", \"elves.txt\");\n  tempLink.click();\n};\n","export const encodeCP1251 = (string) => {\n  function encodeChar(c) {\n    let isKyr = function (str) {\n      return /[а-я]/i.test(str);\n    };\n\n    let cp1251 =\n      \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬*®Ї°±Ііґµ¶·\\\nё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\";\n\n    let p = isKyr(c) ? cp1251.indexOf(c) + 128 : c.charCodeAt(0);\n\n    let h = p.toString(16);\n\n    if (h === \"a\") {\n      h = \"0A\";\n    }\n\n    return \"%\" + h;\n  }\n\n  let res = \"\";\n\n  for (let i = 0; i < string.length; i++) {\n    res += encodeChar(string.charAt(i)); //ну или string[i]\n  }\n\n  return res;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__jNC5T\",\"buttons\":\"App_buttons__3GWl1\"};"],"sourceRoot":""}